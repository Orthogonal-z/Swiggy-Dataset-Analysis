rename(country = Country)%>%
group_by(Country)
Data.2 %>%
select(-3) %>%
rename(country = Country)%>%
group_by(Country)
Data.2 %>%
select(-3) %>%
group_by(country)
Data_2 <- Data.2 %>%
select(-3) %>%
group_by(country)
View(Data_2)
Data_2 <- Data.2 %>%
select(-2,-3) %>%
group_by(country)
View(Data_2)
gapminder <- gapminder
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent)
Data.2 <- data.frame(gapminder)
Data_2 <- Data.2 %>%
select(-2,-3) %>%
group_by(country)
library(tidyverse)
Data_2 <- Data.2 %>%
select(-2,-3) %>%
group_by(country)
Data_2
Data_2 <- Data.2 %>%
group_by(country)
Data_2
Data_2 <- Data.2 %>%
group_by(continent)
Data_2
Data_2 <- Data.2 %>%
select(-3:-5)
group_by(continent)
Data_2
Data_2 <- Data.2 %>%
select(-3:-5)
group_by(continent)
Data_2 <- Data.2 %>%
select(-3:-5)
group_by(Data_2$continent)
class(Data_2$continent)
as.character(Data_2$continent)
Data_2 <- Data.2 %>%
select(-3:-5)
group_by(Data_2$continent)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(gganimate)
gapminder <- gapminder
gapminder %>%
group_by(continent) %>%
summarize(mean_pop=mean(pop))
gapminder <- gapminder
1 <- gapminder %>%
group_by(continent) %>%
summarize(mean_pop=mean(pop))
Sata <- gapminder %>%
group_by(continent) %>%
summarize(mean_pop=mean(pop))
gapminder
Mata <- gapminder %>%
group_by(country) %>%
summarise(GDP = gdpPercap*100/100)
Mata
Mata <- gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap))
Mata
Mata <- gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap))
arrange(GDP)
Mata <- gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap))
arrange(gdpPercap)
gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap))
gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap))
arrange(GDP)
Mata <- gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(GDP)
Mata
Mata <- gapminder %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(desc(GDP))
Mata
head(Mata, 5)
Mata <- gapminder %>%
filter(country = "India")
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(desc(GDP))
gapminder %>%
filter(country = "India") %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(desc(GDP))
Mata <- gapminder %>%
filter(country == "India") %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(desc(GDP))
Mata
Mata <- gapminder %>%
filter(country == "India" | "Pakistan") %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(desc(GDP))
Mata <- gapminder %>%
filter(country == "India" | country == "Pakistan") %>%
group_by(country) %>%
summarise(GDP = mean(gdpPercap)) %>%
arrange(desc(GDP))
Mata
Data <- gapminder
sapply(Data, function(i), sum(is.na(i)))
sapply(Data, function(i) sum(is.na(i)))
sapply(Data, function(i) sum(is.na(i)))
sapply(Data, function(i) sum(is.na(i)))
install.packages("RDSTK")
library(dplyr)
library(RDSTK)
install.packages("leaflet")
library(leaflet)
Data <- c("Gap No 114/1,Behind Kalyani Forge, Dingraj Wasti,Koregoan Bhima,, Tel-Shirur, Dist - Pune, Pune, Maharashtra 412216", "545, Sadashiv peth, Laxmi Road, Alka Talkies Road, near Kulkarni Petrol Pump, Pune, Maharashtra 411030", "Shop 11, Shradha Regency, Wanworie, opposite Kedari Garden, Pune, Maharashtra 411040")
street2coordinates(Data)
Data <- c("Gap No 114/1,Behind Kalyani Forge, Dingraj Wasti,Koregoan Bhima,, Tel-Shirur, Dist - Pune, Pune, Maharashtra 412216")
street2coordinates(Data)
Location = c('1111 S Figueroa St, Los Angeles, CA 90015, United States',
'1313 Disneyland Dr, Anaheim, CA 92802, United States')
street2coordinates(Location)
Location.2 <- do.call(rbind, lapply(Location, street2coordinates))
Location.2 = do.call(rbind, lapply(Location, street2coordinates))
devtools::install_github("rtelmore/RDSTK")
install.packages("devtools")
library(devtools)
devtools::install_github("rtelmore/RDSTK")
Location <- c('1111 S Figueroa St, Los Angeles, CA 90015, United States',
'1313 Disneyland Dr, Anaheim, CA 92802, United States')
Location.2 = do.call(rbind, lapply(Location, street2coordinates))
Location
street2coordinates(Location)
class(Location)
Location <- as.data.frame(c('1111 S Figueroa St, Los Angeles, CA 90015, United States',
'1313 Disneyland Dr, Anaheim, CA 92802, United States'))
street2coordinates(Location)
class(Location)
Location
Location <- as.character(c('1111 S Figueroa St, Los Angeles, CA 90015, United States',
'1313 Disneyland Dr, Anaheim, CA 92802, United States'))
street2coordinates(Location)
Data <- gapminder
View(Data)
library(dplyr)
Data  %>%
select(country, continent, gdpPercap) %>%
group_by(country) %>%
summarise(mean(gdpPercap))
plot(Data)
cor(Data$country, Data$lifeExp)
cor(Data$year, Data$lifeExp)
library(leaflet)
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv")
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv", header = T)
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv", header = T)
library(ggplot2)
library(dplyr)
install.packages("car")
library(car)
colnames(Swiggy)
Swiggy %>%
select("Price.range","Aggregate.rating","Votes")
dim(Swiggy)
Data <- Swiggy[sample(nrow(Swiggy), 4000),]
table(Data$Price.range)
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
Data %>%
plot(density(Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
Data %>%
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
qplot(factor(x = Data$price.range), y = Data$Aggregate.rating, geom = "boxplot", main = "Aggregate Rating by Price Range", Data = Data, xlab = "Price range", ylab = "Ratings", fill = I("darkgreen"))
qplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot", main = "Aggregate Rating by Price Range", Data = Data, xlab = "Price range", ylab = "Ratings", fill = I("darkgreen"))
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv", header = T)
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv", header = T)
library(ggplot2)
library(dplyr)
library(car)
colnames(Swiggy)
Swiggy %>%
select("Price.range","Aggregate.rating","Votes")
dim(Swiggy)
Data <- Swiggy[sample(nrow(Swiggy), 4000),]
table(Data$Price.range)
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
qplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot", main = "Aggregate Rating by Price Range", Data = Data, xlab = "Price range", ylab = "Ratings", fill = I("darkgreen"))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
qplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot", main = "Aggregate Rating by Price Range", Data = Data, xlab = "Price range", ylab = "Ratings", fill = I("darkgreen"))
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
qplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot")
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv", header = T)
library(ggplot2)
library(dplyr)
library(car)
colnames(Swiggy)
Swiggy %>%
select("Price.range","Aggregate.rating","Votes")
dim(Swiggy)
Data <- Swiggy[sample(nrow(Swiggy), 4000),]
table(Data$Price.range)
qplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot")
qplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot")
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
boxplot(Data$Price.range, Data$Aggregate.rating)
boxplot(x = Data$Price.range, y = Data$Aggregate.rating)
boxplot(Data$Aggregate.rating, Data$Price.range)
ggplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot")
ggplot(factor(x = Data$price.range, y = Data$Aggregate.rating, geom = "boxplot")
boxplot(Data$Aggregate.rating, Data$Price.range)
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings", xlim = c(-1,6))
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings")
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings")
View(Swiggy)
Swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv", header = T)
library(ggplot2)
library(dplyr)
library(car)
colnames(Swiggy)
Data.2 <- Swiggy[sample(nrow(Swiggy), 4000),]
Data <- Data.2 %>%
select("Price.range","Aggregate.rating","Votes")
table(Data$Price.range)
plot(table(Data$Price.range))
qqplot(table(Data$Price.range))
qplot(table(Data$Price.range))
qplot(log(table(Data$Price.range))
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count")
qplot(factor(x = Data$Price.range), y = Data$Aggregate.rating,
geom = "boxplot",
main = "Any",
data = Data,
fill = I("darkgreen")
)
qplot(factor(x = Price.range), y = Aggregate.rating,
geom = "boxplot",
main = "Any",
data = Data,
fill = I("darkgreen")
)
kruskal.test(factor(Data$Price.range ~ Data$Aggregate.rating))
kruskal.test(factor(Data$Price.range ~ Data$Aggregate.rating, data = Data))
kruskal.test(Data$Aggregate.rating ~ Data$Price.range))
kruskal.test(Data$Aggregate.rating ~ Data$Price.range)
anova <- aov(Data$Aggregate.rating ~ factor(Data$Price.range))
summary(anova)
summary(anova)
TukeyHSD(anova)
TukeyHSD(anova)
plot(anova, 2, col = "red", cex = 1.5 )
aov_residulas <- residuals(object = anova)
shapiro.test(x = aov_residulas)
LT <-levene.test(Data$Aggregate.rating ~ factor(Data$Price.range))
LT <-levene.Test(Data$Aggregate.rating ~ factor(Data$Price.range))
LT <-leveneTest(Data$Aggregate.rating ~ factor(Data$Price.range))
summarise(LT)
View(LT)
LT
oneway.test(Data$Aggregate.rating ~ factor(Data$Price.range))
pairwise.t.test(Data$Aggregate.rating, Data$Price.range, p.adjust.method = "BH", pool.sd = F)
?pairwise.t.test()
kruskal.test(Data$Votes, Data$Price.range)
install.packages("esquisse")
library(esquisse)
esquisser(data = Data)
esquisser(data = Data)
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_minimal()
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_minimal()
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_economist()
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_theme_fivethirtyeightt()
library(ggthemes)
library(dplyr)
library(car)
library(ggplot2)
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_theme_fivethirtyeightt()
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_fivethirtyeightt()
ggplot(Data) +
aes(x = Votes, y = Price.range, fill = Votes) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
scale_fill_gradient() +
theme_fivethirtyeight()
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count") +
theme_fivethirtyeight()
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count") +
theme_economist()
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count") +
theme_economist_white()
Data %>%
ggplot(aes(factor(x = Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab("Price Range") + ylab("Count") +
theme_solarized()
# Working Directory
setwd("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset")
getwd()
swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv")
library("ggplot2")
library("car")
colmames(swiggy)
colnames(swiggy)
# Working Directory
setwd("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset")
getwd()
swiggy <- read.csv("C:\\Users\\kapil\\Desktop\\GitHub\\Swiggy Dataset\\Swiggy.csv")
library("ggplot2")
library("dplyr")
library("car")
colnames(swiggy)
swiggy %>%
select("Price.range", "Aggregate.rating", "Votes")
Data <- swiggy %>%
select("Price.range", "Aggregate.rating", "Votes")
#
dim(Data)
Data.2 <- Data[sample(nrow(Data), 4000)]
Data.2 <- Data[sample(nrow(Data), 4000), ]
#
table(Data.2$Price.range)
ggplot(data = Data.2, aes(factor(x = Data.2$Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab ("Price Range") + ylab ("Count")
#
plot(density(Data.2$Aggregate.rating), col = "darkblue", main = "Density Curve of Ratings")
plot(density(Data.2$Aggregate.rating), col = "darkblue", main = "Density Curve of Ratings")
plot(density(Data$Aggregate.rating), col = "darkblue" , main = "Density Curve of Ratings")
ggplot(data = Data.2, aes(factor(x = Data.2$Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab ("Price Range") + ylab ("Count")
ggplot(data = Data.2, aes(factor(x = Data.2$Price.range))) +
geom_bar(col = "black", fill = "steelblue") +
ggtitle("Number of restaurants in each price range") +
xlab ("Price Range") + ylab ("Count")
#
plot(density(Data.2$Aggregate.rating), col = "darkblue", main = "Density Curve of Ratings")
#
plot(density(Data.2$Aggregate.rating), col = "darkblue", main = "Density Curve of Ratings")
qplot(factor(Data.2$Price.range), y = Data.2$Aggregate.rating, geom = "boxplot", main = "Aggregate ratings by price range", data = Data.2, xlab = "Price Range", ylab = "rating", fill = I("darkgreen"))
anova <- aov(Data.2$Aggregate.rating ~ factor(Data.2$Price.range))
summary(anova)
summary(anova)
#As we have multiple groups here to prove which  groups are significantly diffrent from one another
#So we will use the TukeyHSD Test here
TukeyHSD(anova)
#As we have multiple groups here to prove which  groups are significantly diffrent from one another
#So we will use the TukeyHSD Test here
#As
TukeyHSD <- TukeyHSD(anova)
summary(TukeyHSD)
TukeyHSD
qplot(factor(Data.2$Price.range), y = Data.2$Aggregate.rating,
geom = "boxplot", main = "Aggregate ratings by price range",
data = Data.2, xlab = "Price Range", ylab = "rating",
fill = I("darkgreen"))
plot(anova, 2, col = "red", cex = 0.5)
Nor.Plot
#Plot to check whether our data is normally distributed or not
#As you can see in the plot our data is not normally distributed
Nor.Plot <- plot(anova, 2, col = "red", cex = 0.5)
aov_residuals <- residuals(object = anova)
#To confirm its normally distributed or not we will use statistical test like shapiro wilk test
shapiro.test(x = aov_residuals)
#Check whether our diffrent categorical have equal variance or not
levene.test <- leveneTest(Data.2$Aggregate.rating ~ factor(Data.2$Price.range)
levene.test
#Check whether our diffrent categorical have equal variance or not
levene_test <- leveneTest(Data.2$Aggregate.rating ~ factor(Data.2$Price.range)
levene_test
#Check whether our diffrent categorical have equal variance or not
LT <- leveneTest(Data.2$Aggregate.rating ~ factor(Data.2$Price.range)
LT
#Check whether our diffrent categorical have equal variance or not
leveneTest(Data.2$Aggregate.rating ~ factor(Data.2$Price.range)
leveneTest(Data.2$Aggregate.rating ~ factor(Data.2$Price.range)
#Check whether our diffrent categorical have equal variance or not
LT <-leveneTest(Data$Aggregate.rating ~ factor(Data$Price.range))
LT
#One Way Test to check whether there is diffrence in restaurants rating at diffrent price range
oneway.test(Data.2$Aggregate.rating ~factor(Data.2$Price.range))
pairwise.t.test((Data.2$Aggregate.rating, Data.2$Price.range,
p.adjust.methods = "BH", pool.sd = F))
pairwise.t.test((Data.2$Aggregate.rating, Data.2$Price.range,
p.adjust.method = "BH", pool.sd = F))
pairwise.t.test((Data.2$Aggregate.rating, Data.2$Price.range,
p.adjust.method = "BH", pool.sd = F))
pairwise.t.test((Data.2$Aggregate.rating, Data.2$Price.range,
p.adjust.methods = "BH", pool.sd = F))
pairwise.t.test(Data$Aggregate.rating, Data$Price.range, p.adjust.method = "BH", pool.sd = F)
kruskal.test(Data.2$Votes, Data.2$Price.range)
#Kruskall wallis test to check whether the diffrence between the groups are statistically significant or not
#As our p.value is lower than 0.05 we reject the null hypothesis
#It meanse the diffrence between the groups are statistically significant
K.T <- kruskal.test(Data.2$Votes, Data.2$Price.range)
K.T
